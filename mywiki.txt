INDEX
############## wiki linux #####################
############## wiki vscode #####################
############## wiki git #####################
############## wiki docker #####################
############## wiki docker-composer #####################
############## wiki raspberry pi ##################### 
------------


############## wiki linux #####################

    https://ayudalinux.com/como-gestionar-usuarios-en-linux/

        $ passwd         canviar de password
        $ sudo adduser username
        $ sudo usermod -aG sudo username
        $ sudo deluser --remove-home username
        
    Setup ssh keys
        $ ssh-copy-id ubuntu@192.168.x.x # cp clau pública al server i accedim fora password.
        If we want we can also disable username/password login altogether and only allow login with ssh keys. 
        $ sudo nano /etc/ssh/sshd_config # and setting PasswordAuthentication no.
        $ sudo systemctl restart ssh
        
    How to Copy Files Between Two Computers
        scp -r your_user_name@ip_address_of_PCA:/path/to/remote/directory /path/to/local/directory
        scp -r tonit@192.168.1.10:Pictures/* .  # copia tot el que hi ha dins la carpeta Pictures de tonit, a la carpeta actual d'on estas.



    https://linuxconfig.org/create-bootable-ubuntu-20-04-usb-startup-disk


        $ sudo shutdown now    # tancar ara.
        $ sudo -s     # passam a super usuari
        $ sudo dpkg-reconfigure tzdata  # configura la zona horaria.
        $ sudo dpkg -l nginx     # Quina versio de nginx tenim?
        $ sudo ln -s /etc/nginx/sites-available/rpi81.test /etc/nginx/sites-enabled/  # link
        $ unlink /etc/nginx/sites-enabled/default      # unlink


        $ lscpu # mostra la arquitectura del cpu, amb ubuntu server diu aarch64, 32 i 64 bits
        $ dpkg --print-architecture     # arm64 en el cas de rpi4 amb ubuntuserver
        $ screenfetch      # Mostra les caraterístiques del sistema del pc.
        $ cat /sys/class/thermal/thermal_zone0/temp # mostra la temperatura de la cpu x1000

        $ sudo netstat -tulpn # active or open internet conexions, ports, socket ports etc
        $ sudo netstat -tulpn | grep -i "80" # connexions existents al port 80
        $ fuser 80/tcp        # to find PIDs running on port 80
        $ ps -p 13625 -o comm=         # To search for process name using process PID
        $ sudo lsof -i       # To display active TCP and UDP endpoints with lsof
        $ sudo lsof -i :80  # To display processes /services listening on a particular port
        
    https://www.yougetsignal.com/  # quins ports estan oberts?

        
        $ curl ifconfig.me    # quina és la ip pública del servidor?
        $ sudo netplan apply
        $ ip add show #( abans ifconfig)
        $ ip route show

    Use sudo kill <pid> or sudo killall <process-name>

    ufw ubuntu firewall
        $ sudo ufw enable
        $ sudo ufw allow 'Nginx HTTP'
        $ sudo ufw reload
        $ sudo ufw status

        $ ufw status      - active or inactive
        $ ufw app list        - available applications
        $ ufw allow OpenSSH    - per poder entrar per ssh
        $ ufw enable             - activam ufw

    ------------------------
    Create Directories and Set Permissions 
    in the /var/www/ directory for our two domains.
        $ sudo mkdir -p /var/www/mytest1.com/public_html
        $sudo mkdir -p /var/www/mytest2.com/public_html
    If we want our regular non-root user to be able to modify files in these directories, we must change the ownership.
        $ sudo chown -R $(whoami):$(whoami) /var/www/mytest1.com/public_html
        $ sudo chown -R $(whoami):$(whoami) /var/www/mytest2.com/public_html
    The $(whoami) variable will take the value of the user you are currently logged in as.
    We must also make sure the permissions for the general web directory /var/www and its contents are set to 755 so that pages can be served correctly.
        $ sudo chmod -R 755 /var/www

    ----------------
    



############## wiki vscode #####################

        Ctrl + B: Ocultar/Mostrar barra de actividades
        Ctrl + Shift +
            E – Explorador
            F – Buscar (pensar en Find)
            G – Control de código (pensar en Git)
            D – Depurador
            X – Extensiones

        Ctrl + Shift + P    # Palette Acceso a toda la funcionalidad.
        Ctrl + P            # Acceso a los ficheros.

    Configurabilidad
    Las opciones de VSCode se almacenan en ficheros JSON (JavaScript Object Notation), lo que nos permite 
    editar toda la configurabilidad de este. Para editar la misma podemos acceder de dos formas:

        Ctrl+Shift+P -> Preferences
        File -> Preferences

    ¿Qué podemos configurar?

        Prácticamente todo el comportamiento del editor, como el tabulado de líneas, el auto formateo, 
        el zoom por defecto, etc. Estos ajustes se pueden guardar a tres distintos niveles aplicándolos 
        solo en esos casos:
            Usuario
            Espacio de trabajo (Workspace)
            Lenguaje (AL, C#, JavaScript, etc.

            Los atajos de teclado. VSCode dispone de muchos atajos de teclados, pero si no nos gusta alguno, 
            podemos modificarlo a nuestro gusto.
            El aspecto: Tema del editor, iconos, colores…
            Snippets, trozos de código generados con solo un par de teclas. Podemos crear todos los que queramos
            y configurarlos para funcionar donde queramos.

    Trucos de edición

        Existen muchas combinaciones de teclado que nos permiten realizar tareas triviales de manera mucho más 
        eficiente.

        Con el multi-cursor podemos editar múltiples puntos del fichero simultáneamente. Se puede realizar 
        de varias maneras:
            Para hacerlo con el ratón: Alt + Click
            Desde el teclado: Ctrl + Alt + Up/Down
            También podemos seleccionar todas las ocurrencias del texto seleccionado: Ctrl + Shift + L
        Cuando queremos modificar una selección de texto:
            Mover línea: Alt + Up/Down
            Copiar línea: Alt + Shift + Up/Down
            Expandir selección: Shift + Alt + Right/Left
        Syde by Syde editing, o abrir varios ficheros en la misma pantalla:
            Sobre explorador: Ctrl + Enter
            Sobre fichero: Crtl + \

        Navegar entre editores: Ctrl + 1,2,3, etc.


    $ Ctrl + F   # Find a word in a File


############## wiki git #####################
   
    $ sudo apt-get install git    # install git

    $ git config --global user.name "nombre_usuario"
    $ git config --global user.email "email_id"

    $ git init Mytest
    $ cd Mytest

    $ nano README        # escrivim info

    $ git add README
    $ git add .         # Add all to stage
    $ git status          # mostra l'estat actual

    $ git commit -m "mensaje"

        ####### Creació d'un repositori a GitHub

        El nombre del repositorio debe ser el mismo que el repositorio del sistema local. 
        Per connectar el repositori local amb el creat a github:
    
    $ git remote add origin https://github.com/user_name/Mytest.git

    $ git push origin main     # pujam el contingut local a remot

        ###### GIT BRANCH

        Cuando los desarrolladores quieren corregir errores o agregar nuevas funciones a menudo crean una rama (branch) o copia del código de modo que puedan realizar commits en forma separada, sin afectar el proyecto original. Luego, cuando hayan terminado pueden fusionar esta rama de vuelta en la rama principal (master).

    $ git branch mirama # crea una nueva rama llamada mirama
    $ git checkout mirama # pasam a utilizar la rama mirama.
        Opción corta:
    $ git checkout -b mirama - crea y pasa a utilizar la rama mirama

        Una vez realizados los cambios, hay que agregarlos al índice de la rama y hacer el commit correspondiente:

    $ git add .
    $ git commit -m "cambios en mirama"

        Luego, hay que volver a la rama principal y tomar los cambios realizados en mirama:

    $ git checkout main
    $ git merge mirama

    $ git branch -d mirama    # Delete local branch

    $ git branch --remote     # List of remote branch
    $ git push -d origin branca2   # Delete remote branch


    $ git push origin main

        ###### GIT FORK      repositorio derivado 

        Gracias a Git y a la existencia de las grandes librerías de repositorios públicos, como Github, gran parte de las veces no es necesario comenzar a programar nuestro proyecto desde cero. En esos casos, es posible tomar este código de base para crear un nuevo proyecto.
        Para ello, lo primero que hay que hacer es un fork de un repositorio existente, o sea, un proyecto derivado del mismo que tome como base el código del proyecto original. En Github, eso se consigue haciendo clic en el botón correspondiente.
        Fork de un Repositorio Github
        Luego, lo que hay que hacer es clonar el repositorio de este nuevo proyecto en nuestra computadora. 
        A modo de ejemplo, podemos utilizar mi repositorio de Ankifox, una extensión para Firefox que permite agregar palabras a Anki, el cual se encuentra disponible en Github:

    $ git clone https://github.com/usemoslinux/Ankifox.git


############## wiki docker #####################

    To see what network(s) your container is on, assuming your container is called c1:
        $ docker inspect c1 -f "{{json .NetworkSettings.Networks }}"

    To disconnect your container from the first network (assuming your first network is called test-net):
        $ docker network disconnect test-net c1

    Then to reconnect it to another network (assuming it's called test-net-2):
        $ docker network connect test-net-2 c1

    To check if two containers (or more) are on a network together:
        $ docker network inspect test-net -f "{{json .Containers }}"


############## wiki docker-composer #####################


############## wiki raspberry pi ##################### 
    https://ubuntu.com/tutorials/how-to-kubernetes-cluster-on-raspberry-pi#4-installing-microk8s

    https://viktorvan.github.io/kubernetes/kubernetes-on-raspberry-pi/

    https://ubuntu.com/tutorials/how-to-install-ubuntu-on-your-raspberry-pi
    
    1. Prepare sd card: Connect micro sd to pc
    2. Install Raspberry Pi Imager https://downloads.raspberrypi.org/imager/imager_amd64.deb
    3. Start Imager and select ubuntu 20.04. Create all os you need

    4. Wifi configuration: sd in a pc, system-boot, edit the network-config file
        For example:

          wifis:
            wlan0:
            dhcp4: true
            optional: true
            access-points:
              "home network":
                password: "123456789"

        A vegades dona problemes. Solució: entram per ethernet:
        https://linuxhint.com/setup_static_ip_address_ubuntu/


    5. Extract sd from the pc and insert to the raspberry pi & boot it
        To find the ip:
        $ nmap -sP 192.168.1.0/24  # Ens mostra quantes ip’s estan actives
        $ ssh ubuntu@ip user & password: ubuntu . Canviar passwd 

        $ ip a    # wlan0 we can see the network interface name and the actual ip

        $ sudo nano /etc/netplan/50-cloud-init.yaml

network:
    ethernets:
        eth0:
            dhcp4: no
            dhcp6: no
            optional: true
            addresses: [192.168.1.13/24]
            gateway4: 192.168.1.1
            nameservers:
                addresses: [192.168.1.1, 8.8.8.8]
    version: 2
    renderer: networkd
    wifis:
        wlan0:
            dhcp4: no
            dhcp6: no
            optional: true
            addresses: [192.168.1.12/24]
            gateway4: 192.168.1.1
            nameservers:
                addresses: [192.168.1.1, 8.8.8.8]
            access-points:
                "SONAMAGAT_5G":
                    password: "passwordx"
                "SONAMAGAT":
                    password: "passwordx"

        $ sudo netplan try    # (opcional)
        $ sudo netplan apply  # (opcional)
        $ sudo reboot
    6. Edit the host name 
        $ hostnamectl
        $ sudo nano /etc/hosts
        $ sudo nano /etc/hostname
        $ sudo reboot
    7. Setup ssh keys
        $ ssh-copy-id ubuntu@192.168.x.x # cp clau pública al server i accedim fora password.
        If we want we can also disable username/password login altogether and only allow login with ssh keys. 
        $ sudo nano /etc/ssh/sshd_config # and setting PasswordAuthentication no.
        $ sudo systemctl restart ssh

    ----------Totes les raspberrys FUNCIONANT -----------




     


    --------
    Notes sobre test que han anat bé:
    https://www.instructables.com/Installing-Nextcloud-on-a-Raspberry-Pi-Using-Docke/    + traefik + https

    https://www.smarthomebeginner.com/traefik-2-docker-tutorial/   info sobre htpasswd
    (basic auth tonit t543res)

    Tools to Check Logs
        Recently, one of my GitHub followers recommended Dozzle. I quickly became a big fan of it. Dozzle allows you to monitor logs of all your docker containers in real-time. This helps to troubleshoot and fix issues.
    authelia: 
    https://www.grc.com/passwords.htm web que suministra ramdom passwords “segurs”


    
